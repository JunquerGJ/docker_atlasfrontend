import { Component, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';
import Vulnerability from 'src/app/shared/models/vulnerability';
import { THIS_EXPR } from '@angular/compiler/src/output/output_ast';
import { getFreshVulnerability } from 'src/app/shared/functions/utils';
import { ContactService } from 'src/app/contacts/contacts.service';
import { AuditService } from 'src/app/audits/audits.service';
import { AssetService } from 'src/app/assets/assets.service';
import { UserService } from 'src/app/administration/users/users.service';
import { AlertsService } from 'src/app/alerts.service';
import { AppConstants } from 'src/app/shared/constants/constants';
import User from 'src/app/shared/models/user';
import Audit from 'src/app/shared/models/audit';
import * as cvss from 'cvss';
import Asset from 'src/app/shared/models/asset';
import Contact from 'src/app/shared/models/contact';

@Component({
  selector: 'app-add-vulnerability',
  templateUrl: './add-vulnerability.component.html',
  styleUrls: ['./add-vulnerability.component.scss']
})
export class AddVulnerabilityComponent implements OnInit,OnDestroy {


@Output() created = new EventEmitter<Vulnerability>()

  public readonly _cweList
  public readonly _vulnerabilityRisk
  public readonly _vulnerabilityStatus
  public readonly _sources
  public infoActive: boolean
  public detailActive: boolean
  public riskActive: boolean
  public baseScoreVisible: boolean
  baseScore = {
    rating: "",
    score: ""
  }
  enviromentalScore = {
    rating: "",
    score: ""
  }
  totalScore = {
    rating: "",
    score: ""
  }
  temporalScore = {
    rating: "",
    score: ""
  }

  constructor(
    private auditService: AuditService,
    private assetService: AssetService,
    private contactService: ContactService,
    private userService: UserService,
    alertService: AlertsService,
  ) {
    this._cweList = AppConstants.cweList
    this._sources = AppConstants.sources
    this._vulnerabilityRisk = AppConstants.vulnerabilityRisk
    this._vulnerabilityStatus = AppConstants.vulnerabilityStatus
  }
  
  ngOnDestroy(): void {
  }

  public newElement : Vulnerability

  public users: User[] = []
  public audits: Audit[] = []
  public assets: Asset[] = []
  public contacts: Contact[] = []
  public auxAuditor: User
  public auxAudit: Audit
  public auxAsset: Asset
  public auxResponsable: Contact

  ngOnInit(): void {
    this.newElement = getFreshVulnerability()

    this.userService.getSome([], { name: true })
      .subscribe(
        (elements) => {
          var i = 0;
          for (i = 0; i < elements.length; i++) {
            var aux = JSON.parse(JSON.stringify(elements[i]))
            delete aux.profile
            delete aux.id
            this.users.push(aux)
          }
        }
      )

    this.auditService.getSome([], { name: true })
      .subscribe(
        (elements) => {
          var i = 0;
          for (i = 0; i < elements.length; i++) {
            var aux = JSON.parse(JSON.stringify(elements[i]))
            this.audits.push(aux)
          }
        }
      )

    this.assetService.getSome([], { name: true })
      .subscribe(
        (elements) => {
          var i = 0;
          for (i = 0; i < elements.length; i++) {
            var aux = JSON.parse(JSON.stringify(elements[i]))
            this.assets.push(aux)
          }
        }
      )

    this.contactService.getSome([], { name: true })
      .subscribe(
        (elements) => {
          var i = 0;
          for (i = 0; i < elements.length; i++) {
            var aux = JSON.parse(JSON.stringify(elements[i]))
            delete aux.tlf
            delete aux.email
            delete aux.id
            this.contacts.push(aux)
          }
        }
      )
  }

  setResponsable(responsableName) {
    this.contacts.forEach((contact) => {
      if (contact.name == responsableName) {
        this.newElement.responsable = contact
      }
    })
  }

  setAsset(assetName) {
    this.assets.forEach((asset) => {
      if (asset.name == assetName) {
        this.newElement.asset = asset
      }
    })
  }

  setAudit(auditName) {
    this.audits.forEach((audit) => {
      if (audit.name == auditName) {
        this.newElement.audit = audit
      }
    })
  }

  setAuditor(auditorName) {
    this.users.forEach((auditor) => {
      if (auditor.name == auditorName) {
        this.newElement.auditor = auditor
      }
    })
  }

  transformDate() {
    if (this.newElement.discoveryDate) { 
      this.newElement.discoveryDate = new Date(this.newElement.discoveryDate) 
    }
    if(this.newElement.mitigationDate){
      this.newElement.mitigationDate = new Date(this.newElement.mitigationDate)
    }
    if(this.newElement.resolutionDate){
      this.newElement.resolutionDate = new Date(this.newElement.resolutionDate)
    }
  }

  getClass(rating) {
    switch (rating) {
      case 'Low':
        return "badge badge-success"
      case 'Medium':
        return "badge badge-warning"
      case 'High':
        return "badge badge-danger"
      case 'Critical':
        return "badge badge-purple"

    }
  }

  calculateRisk() {

    var aux = []

    if (this.newElement.cvssAttackcomplexity) {
      aux.push(this.newElement.cvssAttackcomplexity)
    }
    if (this.newElement.cvssAttackvector) {
      aux.push(this.newElement.cvssAttackvector)
    }
    if (this.newElement.cvssAvailability) {
      aux.push(this.newElement.cvssAvailability)
    }
    if (this.newElement.cvssConfidentiality) {
      aux.push(this.newElement.cvssConfidentiality)
    }
    if (this.newElement.cvssIntegrity) {
      aux.push(this.newElement.cvssIntegrity)
    }
    if (this.newElement.cvssPrivilegesrequired) {
      aux.push(this.newElement.cvssPrivilegesrequired)
    }
    if (this.newElement.cvssScope) {
      aux.push(this.newElement.cvssScope)
    }
    if (this.newElement.cvssUserinteraction) {
      aux.push(this.newElement.cvssUserinteraction)
    }
    
    if(this.newElement.cvssExploitability){
      aux.push(this.newElement.cvssExploitability)
    }
    if(this.newElement.cvssRemediation_level){
      aux.push(this.newElement.cvssRemediation_level)
    }
    if(this.newElement.cvssReportconfidence){
      aux.push(this.newElement.cvssReportconfidence)
    }
    if(this.newElement.cvssEnviromentalAV){
          aux.push(this.newElement.cvssEnviromentalAV)
    }
    if(this.newElement.cvssEnviromentalAC){
      aux.push(this.newElement.cvssEnviromentalAC)
    }
    if(this.newElement.cvssEnviromentalPR){
      aux.push(this.newElement.cvssEnviromentalPR)
    }
    if(this.newElement.cvssEnviromentalUI){
      aux.push(this.newElement.cvssEnviromentalUI)
    }
    if(this.newElement.cvssEnviromentalS){
      aux.push(this.newElement.cvssEnviromentalS)
    }
    if(this.newElement.cvssEnviromentalCI){
      aux.push(this.newElement.cvssEnviromentalCI)
    }
    if(this.newElement.cvssEnviromentalII){
      aux.push(this.newElement.cvssEnviromentalII)
    }
    if(this.newElement.cvssEnviromentalAI){
      aux.push(this.newElement.cvssEnviromentalAI)
    }
    if(this.newElement.cvssEnviromentalCR){
      aux.push(this.newElement.cvssEnviromentalCR)
    }
    if(this.newElement.cvssEnviromentalIR){
      aux.push(this.newElement.cvssEnviromentalIR)
    }
    if(this.newElement.cvssEnviromentalAR){
      aux.push(this.newElement.cvssEnviromentalAR)
    }

    const vector = 'CVSS:3.0/' + aux.join('/')


    this.baseScore = cvss.getAll(vector).base
    this.temporalScore = cvss.getAll(vector).temporal
    this.enviromentalScore = cvss.getAll(vector).environmental



    console.log("base",this.baseScore)
    console.log("temporal",this.temporalScore)
    console.log("environmental",this.enviromentalScore)
    console.log("score",cvss.getScore(vector))

  }

  create(){
    delete this.newElement.id
    this.transformDate()
    this.created.emit(this.newElement)
  }

}
