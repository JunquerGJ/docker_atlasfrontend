import { Component, OnInit, OnDestroy, Directive, OnChanges, SimpleChanges, ÉµConsole } from '@angular/core';
import Vulnerability from 'src/app/shared/models/vulnerability';
import { getFreshVulnerability, validVulnerability } from 'src/app/shared/functions/utils';
import { ContactService } from 'src/app/contacts/contacts.service';
import { AuditService } from 'src/app/audits/audits.service';
import { AssetService } from 'src/app/assets/assets.service';
import { UserService } from 'src/app/administration/users/users.service';
import { AlertsService } from 'src/app/alerts.service';
import { AppConstants } from 'src/app/shared/constants/constants';
import User from 'src/app/shared/models/user';
import Audit from 'src/app/shared/models/audit';
import * as cvss from 'cvss';
import Asset from 'src/app/shared/models/asset';
import Contact from 'src/app/shared/models/contact';
import { AddElementComponent } from 'src/app/shared/classes/class';
import Domain from 'src/app/shared/models/domain';
import { DomainService } from 'src/app/domains/domains.service';
import Server from 'src/app/shared/models/server';
import { ServerService } from 'src/app/servers/servers.service';





@Component({
  selector: 'app-add-vulnerability',
  templateUrl: './add-vulnerability.component.html',
  styleUrls: ['./add-vulnerability.component.scss'],
})
export class AddVulnerabilityComponent extends AddElementComponent<Vulnerability> implements OnInit, OnDestroy {

  getFreshElement = getFreshVulnerability
  validateElement = validVulnerability

  public readonly _cweList
  public readonly _vulnerabilityRisk
  public readonly _vulnerabilityStatus
  public readonly _vulnerabilityType
  public readonly _sources
  public readonly _CIAvalues
  public cvssVector: String
  public infoActive: boolean
  public detailActive: boolean
  public riskActive: boolean
  public evidenceActive: boolean
  public baseScoreVisible: boolean
  baseScore = {
    rating: "",
    score: ""
  }
  enviromentalScore = {
    rating: "",
    score: ""
  }
  totalScore = {
    rating: "",
    score: ""
  }
  temporalScore = {
    rating: "",
    score: ""
  }

  constructor(
    private auditService: AuditService,
    private assetService: AssetService,
    private contactService: ContactService,
    private userService: UserService,
    private domainService: DomainService,
    private serverService: ServerService,
    alertService: AlertsService,
  ) {
    super(alertService)
    this._cweList = AppConstants.cweList
    this._sources = AppConstants.sources
    this._vulnerabilityRisk = AppConstants.vulnerabilityRisk
    this._vulnerabilityStatus = AppConstants.vulnerabilityStatus
    this._CIAvalues = AppConstants.grcValues
    this._vulnerabilityType = AppConstants.vulnerabilityType

  }


  ngOnDestroy(): void {
  }



  public users: User[] = []
  public audits: Audit[] = []
  public servers: Server[] = []
  public assets: Asset[] = []
  public domains: Domain[] = []
  public contacts: Contact[] = []
  public auxAuditor: String = ""
  public auxAudit: String = ""
  public auxAsset: String = ""
  public auxResponsable: String = ""
  public auxDomain: String = ""
  public auxServer: String = ""

  ngOnInit(): void {
    this.newElement = this.getFreshElement()

    this.userService.getSome([], { name: true })
      .subscribe(
        (elements) => {
          var i = 0;
          for (i = 0; i < elements.length; i++) {
            var aux = JSON.parse(JSON.stringify(elements[i]))
            delete aux.profile
            delete aux.id
            this.users.push(aux)
          }
        }
      )

    this.auditService.getSome([], { name: true, asset: true, domain: true, auditor: true })
      .subscribe(
        (elements) => {
          var i = 0;
          for (i = 0; i < elements.length; i++) {
            var aux = JSON.parse(JSON.stringify(elements[i]))
            this.audits.push(aux)
          }
        }
      )

    this.contactService.getSome([], { name: true })
      .subscribe(
        (elements) => {
          var i = 0;
          for (i = 0; i < elements.length; i++) {
            var aux = JSON.parse(JSON.stringify(elements[i]))
            delete aux.tlf
            delete aux.email
            delete aux.id
            this.contacts.push(aux)
          }
        }
      )
  }

  getContent(event) {
    if (event == "Application") {
      this.servers = []
      this.assetService.getSome([], { name: true, confidentiality: true, integrity: true, availability: true })
        .subscribe(
          (elements) => {
            var i = 0;
            for (i = 0; i < elements.length; i++) {
              var aux = JSON.parse(JSON.stringify(elements[i]))
              this.assets.push(aux)
            }
          }
        )
    } else if (event == "Service") {
      this.assets = []
      this.serverService.getSome([], { hostname: true, idss: true, assets: true })
        .subscribe(
          (elements) => {
            var i = 0;
            for (i = 0; i < elements.length; i++) {
              var aux = JSON.parse(JSON.stringify(elements[i]))
              this.servers.push(aux)
            }
          }
        )
    }
  }

  setResponsable(responsableName) {
    var i = 0;
    for (i < 0; i < this.contacts.length; i++) {
      if (this.contacts[i].name == responsableName) {
        this.newElement.responsable = this.contacts[i]
        return
      }
    }
    this.auxResponsable = ''
  }

  getAssetDomains(asset: Asset) {
    this.domainService.getSome([{ asset: { name: asset.name } }], { url: true, wafs: true, privateDomain: true })
      .subscribe(
        (elements) => {
          this.domains = elements
        }
      )
  }


  setAsset(assetName) {
    var i = 0;
    for (i < 0; i < this.assets.length; i++) {
      if (this.assets[i].name == assetName) {
        this.newElement.asset = this.assets[i]
        this.auxAsset = assetName // setAudit
        this.getAssetDomains(this.assets[i])
        this.resetEnviromentalValues()
        //this.domains = this.assets[i].Domain
        this.setEnviromentalCIAValues(this.assets[i])
        return
      }
    }
    this.auxAsset = ''
  }



  setServer(hostname) {
    var i = 0;
    for (i < 0; i < this.servers.length; i++) {
      if (this.servers[i].hostname == hostname) {
        this.newElement.server = this.servers[i]
        this.auxServer = hostname // setAudit
        this.resetEnviromentalValues()
        this.setEnviromentalApplicationValues_server(this.servers[i])
        return
      }
    }
    this.auxAsset = ''
  }


  resetEnviromentalValues() {
    this.newElement.cvssExploitability = "E:X"
    this.newElement.cvssRemediation_level = "RL:X"
    this.newElement.cvssReportconfidence = "RC:X"
    this.newElement.cvssEnviromentalUI = "MUI:X"
    this.newElement.cvssEnviromentalAC = "MAC:X"
    this.newElement.cvssEnviromentalAR = "AR:X"
    this.newElement.cvssEnviromentalAI = "MA:X"
    this.newElement.cvssEnviromentalAV = "MAV:X"
    this.newElement.cvssEnviromentalCI = "MC:X"
    this.newElement.cvssEnviromentalCR = "CR:X"
    this.newElement.cvssEnviromentalII = "MI:X"
    this.newElement.cvssEnviromentalIR = "IR:X"
    this.newElement.cvssEnviromentalPR = "MPR:X"
    this.newElement.cvssEnviromentalS = "MS:X"
  }

  setDomain(domainUrl) {
    var i = 0;
    for (i < 0; i < this.domains.length; i++) {
      if (this.domains[i].url == domainUrl) {
        this.newElement.domain = this.domains[i]
        this.auxDomain = domainUrl // setAudit
        this.setEnviromentalApplicationValues_application(this.domains[i])
        return
      }
    }
    this.auxDomain = ''
  }

  setEnviromentalCIAValues(asset: Asset) {
    if (asset.confidentiality) {
      this.newElement.cvssEnviromentalCR = "CR:" + asset.confidentiality.substring(0, 1)
      if(this.newElement.cvssEnviromentalCR=="CR:N"){
        this.newElement.cvssEnviromentalCR = "CR:X"
      }
    }
    if (asset.availability) {
      this.newElement.cvssEnviromentalAR = "AR:" + asset.availability.substring(0, 1)
      if(this.newElement.cvssEnviromentalAR=="AR:N"){
        this.newElement.cvssEnviromentalAR = "AR:X"
      }
    }
    if (asset.integrity) {
      this.newElement.cvssEnviromentalIR = "IR:" + asset.integrity.substring(0, 1)
      if(this.newElement.cvssEnviromentalIR=="IR:N"){
        this.newElement.cvssEnviromentalIR = "IR:X"
      }
    }
  }

  setEnviromentalApplicationValues_application(domain: Domain) {
    if (domain.privateDomain) {
      this.newElement.cvssEnviromentalAV = "MAV:A"
    } else {
      this.newElement.cvssEnviromentalAV = "MAV:N"
    }
    var i = 0;

    if (domain.wafs.length > 0) {
      this.newElement.cvssEnviromentalAC = "MAC:H"
    } else {
      this.newElement.cvssEnviromentalAC = "MAC:X"
    }

    /*  for(i=0;i< domain.wafs.length;i++){
        if(domain.wafs[i].name.includes("WAF")){
          this.newElement.cvssEnviromentalAC = "MAC:H"
          return    
        }
      }
      this.newElement.cvssEnviromentalAC = "MAC:X"*/
  }
  setEnviromentalApplicationValues_server(server: Server) {
    if (server.idss.length > 0) {
      this.newElement.cvssEnviromentalAC = "MAC:H"
    } else {
      this.newElement.cvssEnviromentalAC = "MAC:X"
    }
    var i = 0;

    for (i = 0; i < server.assets.length; i++) {
      console.log(server.assets[i])
      if (server.assets[i].confidentiality) {
        this.newElement.cvssEnviromentalCR = "CR:" + this.getBiggerGRCValues(this.newElement.cvssEnviromentalCR, server.assets[i].confidentiality)
      }
      if (server.assets[i].availability) {
        this.newElement.cvssEnviromentalAR = "AR:" + this.getBiggerGRCValues(this.newElement.cvssEnviromentalAR, server.assets[i].availability)
      }
      if (server.assets[i].integrity) {
        this.newElement.cvssEnviromentalIR = "IR:" + this.getBiggerGRCValues(this.newElement.cvssEnviromentalIR, server.assets[i].integrity)
      }
    }

  }
  getBiggerGRCValues(currentValue, newValue) {
    var result = ""
    if (currentValue) {
      currentValue = currentValue.split(":")[1]
    }
    switch (currentValue) {
      case undefined:
        result = newValue;
        break;
      case "X":
        result = newValue;
        break;
      case "L":
        if (newValue != "NONE") {
          result = newValue;
        }
        break;
      case "M":
        if (newValue == "HIGH" || newValue == "CRITICAL") {
          result = "newValue"
        }
        break;
      case "H":
      case "C":
        result = currentValue;
        break;
      default:
        break;
    }
    console.log(result)
    if (result == "CRITICAL") {
      result = "H"
    } else if (result == "NONE") {
      result = "X"
    } else result = result.substr(0, 1);
    console.log(result)
    return result;
  }



  setCVSSVector(cvssVector) {
    var fields = cvssVector.split("/")
    for (var i = 0; i < fields.length; i++) {
      // fields.forEach(function (this,field) {
      switch (true) {
        case fields[i].startsWith("AV:"):
          this.newElement.cvssAttackvector = fields[i]
          break;
        case fields[i].startsWith("AC:"):
          this.newElement.cvssAttackcomplexity = fields[i]
          break;
        case fields[i].startsWith("PR:"):
          this.newElement.cvssPrivilegesrequired = fields[i]
          break;
        case fields[i].startsWith("UI:"):
          this.newElement.cvssUserinteraction = fields[i]
          break;
        case fields[i].startsWith("S:"):
          this.newElement.cvssScope = fields[i]
          break;
        case fields[i].startsWith("C:"):
          this.newElement.cvssConfidentiality = fields[i]
          break;
        case fields[i].startsWith("A:"):
          this.newElement.cvssAvailability = fields[i]
          break;
        case fields[i].startsWith("I:"):
          this.newElement.cvssIntegrity = fields[i]
          break;
        case fields[i].startsWith("E:"):
          this.newElement.cvssExploitability = fields[i]
          break;
        case fields[i].startsWith("RL:"):
          this.newElement.cvssRemediation_level = fields[i]
          break;
        case fields[i].startsWith("RC:"):
          this.newElement.cvssReportconfidence = fields[i]
          break;
        case fields[i].startsWith("MAV:"):
          this.newElement.cvssEnviromentalAV = fields[i]
          break;
        case fields[i].startsWith("MAC:"):
          this.newElement.cvssEnviromentalAC = fields[i]
          break;
        case fields[i].startsWith("MPR:"):
          this.newElement.cvssEnviromentalPR = fields[i]
          break;
        case fields[i].startsWith("MUI:"):
          this.newElement.cvssEnviromentalUI = fields[i]
          break;
        case fields[i].startsWith("MS:"):
          this.newElement.cvssEnviromentalS = fields[i]
          break;
        case fields[i].startsWith("MC:"):
          this.newElement.cvssEnviromentalCI = fields[i]
          break;
        case fields[i].startsWith("MI:"):
          this.newElement.cvssEnviromentalII = fields[i]
          break;
        case fields[i].startsWith("MA:"):
          this.newElement.cvssEnviromentalAI = fields[i]
          break;
        case fields[i].startsWith("CR:"):
          this.newElement.cvssEnviromentalCR = fields[i]
          break;
        case fields[i].startsWith("IR:"):
          this.newElement.cvssEnviromentalIR = fields[i]
          break;
        case fields[i].startsWith("AR:"):
          this.newElement.cvssEnviromentalAR = fields[i]
          break;

      }
    }
    this.calculateRisk()
  }


  setAudit(auditName) {
    var i = 0;
    for (i < 0; i < this.audits.length; i++) {
      if (this.audits[i].name == auditName) {
        this.newElement.audit = this.audits[i]
        this.setAsset(this.audits[i].asset.name)
        this.setAuditor(this.audits[i].auditor.name)
        this.setDomain(this.audits[i].domain.url)
        return
      }
    }
    this.auxAudit = ''
  }

  setAuditor(auditorName) {
    var i = 0;
    for (i < 0; i < this.users.length; i++) {
      if (this.users[i].name == auditorName) {
        this.newElement.auditor = this.users[i]
        this.auxAuditor = auditorName
        return
      }
    }
    this.auxAuditor = ''
  }





  getClass(rating) {
    switch (rating) {
      case 'Low':
        return "badge badge-success"
      case 'Medium':
        return "badge badge-warning"
      case 'High':
        return "badge badge-danger"
      case 'Critical':
        return "badge badge-purple"

    }
  }

  calculateRisk() {

    var aux = []

    if (this.newElement.cvssAttackcomplexity) {
      aux.push(this.newElement.cvssAttackcomplexity)
    }
    if (this.newElement.cvssAttackvector) {
      aux.push(this.newElement.cvssAttackvector)
    }
    if (this.newElement.cvssAvailability) {
      aux.push(this.newElement.cvssAvailability)
    }
    if (this.newElement.cvssConfidentiality) {
      aux.push(this.newElement.cvssConfidentiality)
    }
    if (this.newElement.cvssIntegrity) {
      aux.push(this.newElement.cvssIntegrity)
    }
    if (this.newElement.cvssPrivilegesrequired) {
      aux.push(this.newElement.cvssPrivilegesrequired)
    }
    if (this.newElement.cvssScope) {
      aux.push(this.newElement.cvssScope)
    }
    if (this.newElement.cvssUserinteraction) {
      aux.push(this.newElement.cvssUserinteraction)
    }

    if (this.newElement.cvssExploitability) {
      aux.push(this.newElement.cvssExploitability)
    }
    if (this.newElement.cvssRemediation_level) {
      aux.push(this.newElement.cvssRemediation_level)
    }
    if (this.newElement.cvssReportconfidence) {
      aux.push(this.newElement.cvssReportconfidence)
    }
    if (this.newElement.cvssEnviromentalAV) {
      aux.push(this.newElement.cvssEnviromentalAV)
    }
    if (this.newElement.cvssEnviromentalAC) {
      aux.push(this.newElement.cvssEnviromentalAC)
    }
    if (this.newElement.cvssEnviromentalPR) {
      aux.push(this.newElement.cvssEnviromentalPR)
    }
    if (this.newElement.cvssEnviromentalUI) {
      aux.push(this.newElement.cvssEnviromentalUI)
    }
    if (this.newElement.cvssEnviromentalS) {
      aux.push(this.newElement.cvssEnviromentalS)
    }
    if (this.newElement.cvssEnviromentalCI) {
      aux.push(this.newElement.cvssEnviromentalCI)
    }
    if (this.newElement.cvssEnviromentalII) {
      aux.push(this.newElement.cvssEnviromentalII)
    }
    if (this.newElement.cvssEnviromentalAI) {
      aux.push(this.newElement.cvssEnviromentalAI)
    }
    if (this.newElement.cvssEnviromentalCR) {
      aux.push(this.newElement.cvssEnviromentalCR)
    }
    if (this.newElement.cvssEnviromentalIR) {
      aux.push(this.newElement.cvssEnviromentalIR)
    }
    if (this.newElement.cvssEnviromentalAR) {
      aux.push(this.newElement.cvssEnviromentalAR)
    }

    const vector = 'CVSS:3.0/' + aux.join('/')

    console.log(vector)
    console.log(cvss.getAll(vector))
    this.baseScore = cvss.getAll(vector).base
    this.temporalScore = cvss.getAll(vector).temporal
    this.enviromentalScore = cvss.getAll(vector).environmental

  }





}
