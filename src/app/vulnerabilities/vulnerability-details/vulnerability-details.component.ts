import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';
import Vulnerability from 'src/app/shared/models/vulnerability';
import { HttpParams } from '@angular/common/http';
import { VulnerabilityService } from '../vulnerabilities.service';
import { AlertsService } from 'src/app/alerts.service';
import { AppConstants } from 'src/app/shared/constants/constants';
import { UserService } from 'src/app/administration/users/users.service';
import { ContactService } from 'src/app/contacts/contacts.service';
import { AssetService } from 'src/app/assets/assets.service';
import { AuditService } from 'src/app/audits/audits.service';
import Contact from 'src/app/shared/models/contact';
import * as cvss from 'cvss';
import * as moment from 'moment'
import { getFreshUser, getFreshAudit, getFreshAsset, getFreshContact } from '../../shared/functions/utils'

import Asset from 'src/app/shared/models/asset';
import Audit from 'src/app/shared/models/audit';
import User from 'src/app/shared/models/user';
import { Router } from '@angular/router';

@Component({
  selector: 'app-vulnerability-details',
  templateUrl: './vulnerability-details.component.html',
  styleUrls: ['./vulnerability-details.component.scss']
})
export class VulnerabilityDetailsComponent implements OnInit, OnDestroy {

  @Input() input: Vulnerability
  @Output() updated = new EventEmitter<Vulnerability>()
  vulnerability: Vulnerability;


  public users: User[] = []
  public audits: Audit[] = []
  public assets: Asset[] = []
  public contacts: Contact[] = []
  public auxAuditor: String = ""
  public auxAudit: String = ""
  public auxCwe: String = ""
  public auxAsset: String = ""
  public auxResponsable: String = ""
  public cvssVector: String

  public readonly _cweList
  public readonly _vulnerabilityRisk
  public readonly _vulnerabilityStatus
  public readonly _sources
  public infoActive: boolean
  public detailActive: boolean
  public riskActive: boolean
  public baseScoreVisible: boolean
  baseScore = {
    rating: "",
    score: ""
  }
  enviromentalScore = {
    rating: "",
    score: ""
  }
  totalScore = {
    rating: "",
    score: ""
  }
  temporalScore = {
    rating: "",
    score: ""
  }
  hadAudit: any;
  hadAuditor: any;
  hadResponsable: any;

  constructor(
    private vulnerabilityService: VulnerabilityService,
    private auditService: AuditService,
    private assetService: AssetService,
    private contactService: ContactService,
    private userService: UserService,
    private alertService: AlertsService,
    private router: Router
  ) {
    this._cweList = AppConstants.cweList
    this._sources = AppConstants.sources
    this._vulnerabilityRisk = AppConstants.vulnerabilityRisk
    this._vulnerabilityStatus = AppConstants.vulnerabilityStatus
  }
  ngOnDestroy(): void {
  }

  ngOnInit(): void {
    this.vulnerability = this.input
    this.getVulnerabilityDetails(this.input)

    this.userService.getSome([], { name: true })
      .subscribe(
        (elements) => {
          var i = 0;
          for (i = 0; i < elements.length; i++) {
            var aux = JSON.parse(JSON.stringify(elements[i]))
            delete aux.profile
            delete aux.id
            this.users.push(aux)
          }
        }
      )

    this.auditService.getSome([], { name: true })
      .subscribe(
        (elements) => {
          var i = 0;
          for (i = 0; i < elements.length; i++) {
            var aux = JSON.parse(JSON.stringify(elements[i]))
            this.audits.push(aux)
          }
        }
      )

    this.assetService.getSome([], { name: true })
      .subscribe(
        (elements) => {
          var i = 0;
          for (i = 0; i < elements.length; i++) {
            var aux = JSON.parse(JSON.stringify(elements[i]))
            this.assets.push(aux)
          }
        }
      )

    this.contactService.getSome([], { name: true })
      .subscribe(
        (elements) => {
          var i = 0;
          for (i = 0; i < elements.length; i++) {
            var aux = JSON.parse(JSON.stringify(elements[i]))
            delete aux.tlf
            delete aux.email
            delete aux.id
            this.contacts.push(aux)
          }
        }
      )
  }

  setResponsable(responsableName) {
    var i = 0;
    for (i < 0; i < this.contacts.length; i++) {
      if (this.contacts[i].name == responsableName) {
        this.vulnerability.responsable = this.contacts[i]
        return
      }
    }
    this.vulnerability.responsable = null
  }

  setAsset(assetName) {
    var i = 0;
    for (i = 0; i < this.assets.length; i++) {
      if (this.assets[i].name == assetName)
        this.vulnerability.asset = this.assets[i]
      return;
    }
    this.vulnerability.asset = null

  }

  setAudit(auditName) {
    var i = 0;
    for (i = 0; i < this.audits.length; i++) {
      if (this.audits[i].name == auditName) {
        this.vulnerability.audit = this.audits[i]
        return;
      }
    }
    this.vulnerability.audit = null
  }

  setCVSSVector(cvssVector) {
    var fields = cvssVector.split("/")
    for (var i = 0; i < fields.length; i++) {
      // fields.forEach(function (this,field) {
      switch (true) {
        case fields[i].startsWith("AV:"):
          this.vulnerability.cvssAttackvector = fields[i]
          break;
        case fields[i].startsWith("AC:"):
          this.vulnerability.cvssAttackcomplexity = fields[i]
          break;
        case fields[i].startsWith("PR:"):
          this.vulnerability.cvssPrivilegesrequired = fields[i]
          break;
        case fields[i].startsWith("UI:"):
          this.vulnerability.cvssUserinteraction = fields[i]
          break;
        case fields[i].startsWith("S:"):
          this.vulnerability.cvssScope = fields[i]
          break;
        case fields[i].startsWith("C:"):
          this.vulnerability.cvssConfidentiality = fields[i]
          break;
        case fields[i].startsWith("A:"):
          this.vulnerability.cvssAvailability = fields[i]
          break;
        case fields[i].startsWith("I:"):
          this.vulnerability.cvssIntegrity = fields[i]
          break;
        case fields[i].startsWith("E:"):
          this.vulnerability.cvssExploitability = fields[i]
          break;
        case fields[i].startsWith("RL:"):
          this.vulnerability.cvssRemediation_level = fields[i]
          break;
        case fields[i].startsWith("RC:"):
          this.vulnerability.cvssReportconfidence = fields[i]
          break;
        case fields[i].startsWith("MAV:"):
          this.vulnerability.cvssEnviromentalAV = fields[i]
          break;
        case fields[i].startsWith("MAC:"):
          this.vulnerability.cvssEnviromentalAC = fields[i]
          break;
        case fields[i].startsWith("MPR:"):
          this.vulnerability.cvssEnviromentalPR = fields[i]
          break;
        case fields[i].startsWith("MUI:"):
          this.vulnerability.cvssEnviromentalUI = fields[i]
          break;
        case fields[i].startsWith("MS:"):
          this.vulnerability.cvssEnviromentalS = fields[i]
          break;
        case fields[i].startsWith("MC:"):
          this.vulnerability.cvssEnviromentalCI = fields[i]
          break;
        case fields[i].startsWith("MI:"):
          this.vulnerability.cvssEnviromentalII = fields[i]
          break;
        case fields[i].startsWith("MA:"):
          this.vulnerability.cvssEnviromentalAI = fields[i]
          break;
        case fields[i].startsWith("CR:"):
          this.vulnerability.cvssEnviromentalCR = fields[i]
          break;
        case fields[i].startsWith("IR:"):
          this.vulnerability.cvssEnviromentalIR = fields[i]
          break;
        case fields[i].startsWith("AR:"):
          this.vulnerability.cvssEnviromentalAR = fields[i]
          break;

      }
    }
    this.calculateRisk()
  }
  setAuditor(auditorName) {

    var i = 0;
    for (i = 0; i < this.users.length; i++) {
      if (auditorName == this.users[i].name) {
        this.vulnerability.auditor = this.users[i]
      }
    }
    this.vulnerability.auditor = null
  }

  transformDate() {
    if (this.vulnerability.discoveryDate) {
      console.log("Le date")
      console.log(this.vulnerability.discoveryDate)
      this.vulnerability.discoveryDate = new Date(this.vulnerability.discoveryDate)
    }
    if (this.vulnerability.mitigationDate) {
      this.vulnerability.mitigationDate = new Date(this.vulnerability.mitigationDate)
    }
    if (this.vulnerability.resolutionDate) {
      this.vulnerability.resolutionDate = new Date(this.vulnerability.resolutionDate)
    }
  }

  getClass(rating) {
    switch (rating) {
      case 'Low':
        return "badge badge-success"
      case 'Medium':
        return "badge badge-warning"
      case 'High':
        return "badge badge-danger"
      case 'Critical':
        return "badge badge-purple"

    }
  }

  calculateRisk() {

    var aux = []

    if (this.vulnerability.cvssAttackcomplexity) {
      aux.push(this.vulnerability.cvssAttackcomplexity)
    }
    if (this.vulnerability.cvssAttackvector) {
      aux.push(this.vulnerability.cvssAttackvector)
    }
    if (this.vulnerability.cvssAvailability) {
      aux.push(this.vulnerability.cvssAvailability)
    }
    if (this.vulnerability.cvssConfidentiality) {
      aux.push(this.vulnerability.cvssConfidentiality)
    }
    if (this.vulnerability.cvssIntegrity) {
      aux.push(this.vulnerability.cvssIntegrity)
    }
    if (this.vulnerability.cvssPrivilegesrequired) {
      aux.push(this.vulnerability.cvssPrivilegesrequired)
    }
    if (this.vulnerability.cvssScope) {
      aux.push(this.vulnerability.cvssScope)
    }
    if (this.vulnerability.cvssUserinteraction) {
      aux.push(this.vulnerability.cvssUserinteraction)
    }

    if (this.vulnerability.cvssExploitability) {
      aux.push(this.vulnerability.cvssExploitability)
    }
    if (this.vulnerability.cvssRemediation_level) {
      aux.push(this.vulnerability.cvssRemediation_level)
    }
    if (this.vulnerability.cvssReportconfidence) {
      aux.push(this.vulnerability.cvssReportconfidence)
    }
    if (this.vulnerability.cvssEnviromentalAV) {
      aux.push(this.vulnerability.cvssEnviromentalAV)
    }
    if (this.vulnerability.cvssEnviromentalAC) {
      aux.push(this.vulnerability.cvssEnviromentalAC)
    }
    if (this.vulnerability.cvssEnviromentalPR) {
      aux.push(this.vulnerability.cvssEnviromentalPR)
    }
    if (this.vulnerability.cvssEnviromentalUI) {
      aux.push(this.vulnerability.cvssEnviromentalUI)
    }
    if (this.vulnerability.cvssEnviromentalS) {
      aux.push(this.vulnerability.cvssEnviromentalS)
    }
    if (this.vulnerability.cvssEnviromentalCI) {
      aux.push(this.vulnerability.cvssEnviromentalCI)
    }
    if (this.vulnerability.cvssEnviromentalII) {
      aux.push(this.vulnerability.cvssEnviromentalII)
    }
    if (this.vulnerability.cvssEnviromentalAI) {
      aux.push(this.vulnerability.cvssEnviromentalAI)
    }
    if (this.vulnerability.cvssEnviromentalCR) {
      aux.push(this.vulnerability.cvssEnviromentalCR)
    }
    if (this.vulnerability.cvssEnviromentalIR) {
      aux.push(this.vulnerability.cvssEnviromentalIR)
    }
    if (this.vulnerability.cvssEnviromentalAR) {
      aux.push(this.vulnerability.cvssEnviromentalAR)
    }


    const vector = 'CVSS:3.0/' + aux.join('/')
    this.cvssVector = vector

    this.baseScore = cvss.getAll(vector).base
    this.temporalScore = cvss.getAll(vector).temporal
    this.enviromentalScore = cvss.getAll(vector).environmental



    console.log("base", this.baseScore)
    console.log("temporal", this.temporalScore)
    console.log("environmental", this.enviromentalScore)
    console.log("score", cvss.getScore(vector))

  }

  getVulnerabilityDetails = (vulnerability: Vulnerability) => {
    const aux = {
      id: true,
      asset: {
        select: {
          name: true
        }
      },
      responsable: {
        select: {
          name: true
        }
      },
      audit: {
        select: {
          name: true
        }
      },
      cwe: {
        select: {
          name: true
        }
      },
      auditor: {
        select: {
          name: true
        }
      },
      name: true,
      discoveryDate: true,
      mitigationDate: true,
      resolutionDate: true,
      description: true,
      executedTest: true,
      recommendation: true,
      risk: true,
      status: true,
      ticket: true,
      source: true,
      cvssAttackvector: true,
      cvssAttackcomplexity: true,
      cvssPrivilegesrequired: true,
      cvssUserinteraction: true,
      cvssScope: true,
      cvssConfidentiality: true,
      cvssIntegrity: true,
      cvssAvailability: true,
      cvssExploitability: true,
      cvssRemediation_level: true,
      cvssReportconfidence: true,
      threatagentSkill: true,
      threatagentMotive: true,
      observations: true,
      threatagentOpportunity: true,
      threatagentSize: true,
      cvssEnviromentalAV: true,
      cvssEnviromentalAC: true,
      cvssEnviromentalPR: true,
      cvssEnviromentalUI: true,
      cvssEnviromentalS: true,
      cvssEnviromentalCI: true,
      cvssEnviromentalII: true,
      cvssEnviromentalAI: true,
      cvssEnviromentalCR: true,
      cvssEnviromentalIR: true,
      cvssEnviromentalAR: true,
      vulnerabilityEasediscovery: true,
      vulnerabilityEasexploit: true,
      vulnerabilityAwaremess: true,
      vulnerabilityDetection: true,
      techimpactConfidentiality: true,
      techimpactIntegrity: true,
      techimpactAvailability: true,
      techimpactAccountability: true,
      bussimpactFinancial: true,
      bussimpactReputation: true,
      bussimpactNoncompliance: true,
      bussimpactPrivacyviolation: true,
    }

    const params = new HttpParams()
      .set('params', JSON.stringify(aux))

    this.vulnerabilityService.get(vulnerability.id, params)
      .subscribe((vulnerability) => {
        this.vulnerability = vulnerability;
        if (this.vulnerability.discoveryDate)
          this.vulnerability.discoveryDate = new Date(this.vulnerability.discoveryDate)

        if (this.vulnerability.mitigationDate) {
          this.vulnerability.mitigationDate = new Date(this.vulnerability.mitigationDate)
        }
        if (this.vulnerability.resolutionDate) {
          this.vulnerability.resolutionDate = new Date(this.vulnerability.resolutionDate)
        }
        if (this.vulnerability.auditor) {
          this.auxAuditor = this.vulnerability.auditor.name
          this.hadAuditor = true
        }
        else this.vulnerability.auditor = undefined
        if (this.vulnerability.cwe)
          this.auxCwe = this.vulnerability.cwe.name
        else this.vulnerability.cwe = undefined
        if (this.vulnerability.responsable) {
          this.auxResponsable = this.vulnerability.responsable.name
          this.hadResponsable = true
        }
        else this.vulnerability.responsable = undefined
        if (this.vulnerability.audit) {
          this.auxAudit = this.vulnerability.audit.name
          this.hadAudit = true
        } else this.vulnerability.audit = undefined
        if (this.vulnerability.asset)
          this.auxAsset = this.vulnerability.asset.name
        else this.vulnerability.asset = undefined
        this.calculateRisk()
      },
        error => {
          this.alertService.error(error.error.message)
          console.log("^^^^^^^^^^^^")
          if (error.error.message == "Wrong authentication token") {
            console.log("HERERERRRRRRRRRRRRRRRRR")
            this.router.navigate(["/login"])
          }
        });
  };


  update() {

    if (this.vulnerability.discoveryDate)
      this.vulnerability.discoveryDate = new Date(this.vulnerability.discoveryDate)

    if (this.vulnerability.mitigationDate) {
      this.vulnerability.mitigationDate = new Date(this.vulnerability.mitigationDate)
    }
    if (this.vulnerability.resolutionDate) {
      this.vulnerability.resolutionDate = new Date(this.vulnerability.resolutionDate)
    }

    if (!this.vulnerability.audit) {
      if (!this.hadAudit) {
        delete this.vulnerability.audit
      } else {
        this.vulnerability.audit = null
        this.hadAudit = false
      }
    } else {
      if (!this.hadAudit) {
        this.hadAudit = true
      }
    }


    if (!this.vulnerability.auditor) {
      if (!this.hadAuditor) {
        delete this.vulnerability.auditor
      } else {
        this.vulnerability.auditor = null
        this.hadAuditor = false
      }
    } else {
      if (!this.hadAuditor) {
        this.hadAuditor = true
      }
    }

    if (!this.vulnerability.responsable) {
      if (!this.hadResponsable) {
        delete this.vulnerability.responsable
      } else {
        this.vulnerability.responsable = null
        this.hadResponsable = false
      }
    } else {
      if (!this.hadResponsable) {
        this.hadResponsable = true
      }
    }


    this.updated.emit(this.vulnerability)

  }

}
